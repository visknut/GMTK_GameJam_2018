<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_kingdom</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-1</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Initialise variables

global.mode = MODE_INTERMISSION;

yellow_damage = 0;
blue_damage = 0;
green_damage = 0;

wave = 0;
money = 100;
embezzled_money = 0;

alarm[0] = -1;
alarm[1] = -1;

read_all = false;
messages = ds_queue_create();
read_messages = ds_queue_create();

favours = ar(5, 5, 5, 5) //favour_king, favour_queen, favour diplomat, favour general

events = ds_list_create();
pending_events = ds_list_create();

scr_generate_tutorial_events();
character_fired = "";
text_fired = "";
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Initialise enemy variables.

blue_speed_modifier = 1;
blue_damage_modifier = 1;
blue_spawn_modifier = 1;
green_speed_modifier = 1;
green_damage_modifier = 1;
green_spawn_modifier = 1;
yellow_speed_modifier = 1;
yellow_damage_modifier = 1;
yellow_spawn_modifier = 1;

yellow_tributed = false;
green_tributed = false;
blue_tributed = false;

collaberated_yellow_green_west = false;
collaberated_yellow_green_south = false;

collaberated_blue_green_east = false;
collaberated_blue_green_south = false;

collaberated_yellow_blue_east = false;
collaberated_yellow_blue_west = false;
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Initialise text variables.

// common adjectives
common_excited_adjective = ar("thrilling", "great", "amazing", "blissful", "admirable", "celestial", "wicked", "hilarious");
common_positive_adjective = ar("bright", "laudable", "nice", "charming", "merry", "jovial", "humorous", "good");
common_negative_adjective = ar("insulting", "inconceivable", "terrible", "alarming", "regretful", "mediocre");
common_fiendish_adjective = ar("abominable", "accursed", "heineous", "wicked", "devilish", "ungodly", "insufferable");

// common adverbs
common_excited_adverb = ar("amazingly", "blissfully", "admirably", "hilarious");
common_accenting_adverb = ar("dearly", "strongly", "sharply");
common_surprised_adverb = ar("luckily", "shockingly", "unbelievably", "unexpectedly");
common_negative_adverb = ar("inconceivably", "terribly", "alarmingly", "regretfuly");
common_angry_adverb = ar("abominably", "insultingly", "heineously", "wickedly", "devilishly", "insufferably");

// commmon nouns
common_soon_nouns = ar("soon", "soonish", "tomorrow", "any day now", "by a fortnight");

// king

// queen

// diplomat

// general
general_total_damage_classes = ar("their total annihilation", "mildly inconvenient", "though for us to handle", "your downfall from his majesties favour", "our total annihilation");
general_inspections = ar("While walking the premises", "By sifting trough your battleplans", "When inspecting our standing army");
general_subpar_nouns = ar("subpar", "not as strong as it should be", "not strong enough", "too weak", "not adequate");

// clerk
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="1" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Destroy data structures.

ds_queue_destroy(messages);
ds_queue_destroy(read_messages);

ds_list_destroy(events);
ds_list_destroy(pending_events);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="6">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Fire the player


</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="5">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Activate buttons.

instance_activate_object(obj_view);
instance_activate_object(obj_button_message);
instance_activate_object(obj_button_money);
instance_activate_object(obj_button_favour);
instance_activate_object(obj_button_build);
instance_activate_object(obj_button_start_wave);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="4">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Deactivate buttons.

instance_deactivate_object(obj_view);
instance_deactivate_object(obj_button_message);
instance_deactivate_object(obj_button_money);
instance_deactivate_object(obj_button_favour);
instance_deactivate_object(obj_button_build);
instance_deactivate_object(obj_button_start_wave);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="3">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Initiate wave sequence 3-0/4-1-2/5-(6)

// Reset the damage on the castle.
yellow_damage = 0;
blue_damage = 0;
green_damage = 0;

if (favours[CHAR_QUEEN] &gt; 0 &amp;&amp; favours[CHAR_KING] &gt; 0 &amp;&amp; favours[CHAR_DIPLOMAT] &gt; 0 &amp;&amp; favours[CHAR_GENERAL] &gt; 0)
{
    alarm[0] = 120;
    alarm[4] = 60;
    wave += 1;
    global.mode = MODE_WAVE;
    obj_view.current_view = VIEW_NONE;
} else
{
    global.mode = MODE_FIRED;
    if (favours[CHAR_KING] &lt; 1)
    {
        character_fired = "king";
        text_fired = "You disregarded what is the most important:#maintaining the respect of the people.";
    } else if (favours[CHAR_GENERAL] &lt; 1)
    {
        character_fired = "general";
        text_fired = "You disregarded what is the most important:#ensuring the safety of the country.";
    } else if (favours[CHAR_QUEEN] &lt; 1)
    {
        character_fired = "queen";
        text_fired = "You disregarded what is the most important:#ensuring the prosperty of the poeple.";
    } else if (favours[CHAR_DIPLOMAT] &lt; 1)
    {
        character_fired = "diplomat";
        text_fired = "You disregarded what is the most important:#maintaining the good relations with our neighbours.";
    }
    alarm[6] = 60;
}

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Show day
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// End wave


// We don't want old messages messing up the inbox
ds_queue_clear(obj_kingdom.messages);
ds_queue_clear(obj_kingdom.read_messages);
obj_kingdom.read_all = false;

// Generate events.
scr_generate_daily_events();
scr_generate_follow_up_events();
scr_generate_random_events();
scr_generate_triggered_events();


// Clean up and start new day

/* reset all wave variables. */
yellow_tributed = false;
yellow_tributed = false;
yellow_tributed = false;

collaberated_yellow_green_west = false;
collaberated_yellow_green_south = false;

collaberated_blue_green_east = false;
collaberated_blue_green_south = false;

collaberated_yellow_blue_east = false;
collaberated_yellow_blue_west = false;

global.mode = MODE_INTERMISSION;
alarm[2] = 120;
alarm[5] = 60;

room_speed = 30;

// Destory all spawns and remaining enemies.
instance_destroy(obj_spawn);
instance_destroy(obj_enemy);

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Start wave

// Start wave music
audio_play_sound(sound0_GMTKgamemusic_enemy_wave_incoming_questionmark, 1, false);

alarm[1] = 600;

if (!DEBUG)
{
    room_speed = 1000;
}

scr_create_spawn(160, 304, c_yellow, YELLOW_SPAWN_RATE, pth_yellow, YELLOW_HEALTH, YELLOW_SPEED);
scr_create_spawn(368, 400, c_green, GREEN_SPAWN_RATE, pth_green, GREEN_HEALTH, GREEN_SPEED);
scr_create_spawn(544, 288, c_blue, BLUE_SPAWN_RATE, pth_blue, BLUE_HEALTH, BLUE_SPEED);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (global.mode == MODE_WAVE &amp;&amp; alarm[0] &gt; 0)
{
    draw_set_colour(c_black);
    if (alarm[0] &gt; 90)
    {
        draw_set_alpha(1 - ease_out_quint(alarm[0] - 90, 0, 1, 30));
    } else if (alarm[0] &lt; 30)
    {
    
        draw_set_alpha(ease_in_quint(alarm[0], 0, 1, 30));
    } else {
        draw_set_alpha(1);
    }
    
/*    if (alarm[0] &lt; 90 &amp;&amp; alarm[0] &gt; 75)
    {
        draw_set_alpha(1 - ease_in_quint(alarm[0] - 75, 0, 1, 15));
    } else if (alarm[0] &lt; 45 &amp;&amp; alarm[0] &gt; 30)
    {
        draw_set_alpha(ease_in_quint(alarm[0] - 30, 0, 1, 15));
    }*/
    draw_rectangle(0, 0, 720, 560, false);
    draw_set_colour(c_white);
    draw_set_font(fnt_xxl);
    draw_set_valign(fa_middle);
    draw_set_halign(fa_center);
    draw_text(360, 280, "wave " + string(wave));
    // Reset aligned.
    draw_set_valign(fa_left);
    draw_set_halign(fa_top);
    // Reset alpha.
    draw_set_alpha(1);
}

if (global.mode == MODE_INTERMISSION &amp;&amp; alarm[2] &gt; 0)
{
    draw_set_colour(c_white);
    if (alarm[2] &gt; 90)
    {
        draw_set_alpha(1 - ease_out_quint(alarm[2] - 90, 0, 1, 30));
    } else if (alarm[2] &lt; 30)
    {
    
        draw_set_alpha(ease_in_quint(alarm[2], 0, 1, 30));
    } else {
        draw_set_alpha(1);
    }
    draw_rectangle(0, 0, 720, 560, false);
    
/*    if (alarm[2] &lt; 90 &amp;&amp; alarm[2] &gt; 75)
    {
        draw_set_alpha(1 - ease_in_quint(alarm[2] - 75, 0, 1, 15));
    } else if (alarm[2] &lt; 45 &amp;&amp; alarm[2] &gt; 30)
    {
        draw_set_alpha(ease_in_quint(alarm[2] - 30, 0, 1, 15));
    }*/
    draw_set_colour(c_black);
    draw_set_font(fnt_xxl);
    draw_set_valign(fa_middle);
    draw_set_halign(fa_center);
    draw_text(360, 280, "day " + string(wave));
    // Reset aligned.
    draw_set_valign(fa_left);
    draw_set_halign(fa_top);
    // Reset alpha.
    draw_set_alpha(1);
}

if (global.mode == MODE_FIRED)
{
    draw_set_colour(c_black);
    draw_set_alpha(1 - ease_out_quint(alarm[6] - 30, 0, 1, 30));
    draw_rectangle(0, 0, 720, 560, false);
    
    if (alarm[6] &lt; 30)
    {
        draw_set_alpha(1 - ease_out_quint(alarm[6], 0, 1, 30));
        draw_set_colour(c_white);
        draw_set_font(fnt_large);
        draw_set_valign(fa_middle);
        draw_set_halign(fa_center);
        draw_text(360, 200, "You were fired by the " + character_fired + "!");
        draw_set_font(fnt_medium);
        draw_text(360, 240, text_fired);
        // TODO: Let clerk steal money sometimes.
        draw_text(360, 320, "However, you did manage to embezzle " + string(money) + " gold...");
        // Reset aligned.
        draw_set_valign(fa_left);
        draw_set_halign(fa_top);
    }

    // Reset alpha.
    draw_set_alpha(1);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="9" enumb="32">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//increase roomspeed for debugging waves
if (DEBUG &amp;&amp; room_speed == 30)
{
    room_speed = 1000;
} else if (DEBUG)
{
    room_speed = 30
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
