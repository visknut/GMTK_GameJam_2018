<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_gameloop</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-1</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Initialise variables

if (!DEBUG)
{
    randomize();
}

mode = MODE_INTERMISSION;

wave = 0;

character_fired = "";
text_fired = "";
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="4">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Fire the player


</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="3">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Start new day.

/* Create fade. */
mode = MODE_INTERMISSION;
var _fade = instance_create(0, 0, obj_fade);
_fade.text = "day " + string(wave);
_fade.colour_text = c_black;
_fade.colour_background = c_white;

/* We don't want old messages messing up the inbox. */
for (var _c = CHAR_KING; _c &lt;= CHAR_CLERK; _c++)
{
    ds_queue_clear(obj_kingdom.messages[_c]);
    ds_queue_clear(obj_kingdom.read_messages[_c]);
    obj_kingdom.read_all[_c] = false;
}

/* Generate events. */
scr_generate_daily_events();
scr_generate_follow_up_events();
scr_generate_random_events();
scr_generate_triggered_events();

/* reset all wave variables. */
obj_kingdom.tributes = ar(false, false, false);

obj_kingdom.collaberated_yellow_green_west = false;
obj_kingdom.collaberated_yellow_green_south = false;

obj_kingdom.collaberated_blue_green_east = false;
obj_kingdom.collaberated_blue_green_south = false;

obj_kingdom.collaberated_yellow_blue_east = false;
obj_kingdom.collaberated_yellow_blue_west = false;

room_speed = 30;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// End wave

// Destory all spawns and remaining enemies.
instance_destroy(obj_spawn);
instance_destroy(obj_enemy);
instance_destroy(obj_corpse);

if (DEBUG)
{
    show_debug_message("yellow:" + string(obj_kingdom.yellow_damage));
    show_debug_message("blue:" + string(obj_kingdom.blue_damage));
    show_debug_message("green:" + string(obj_kingdom.green_damage));
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Start wave.

// Start wave music
audio_play_sound(sound0_GMTKgamemusic_enemy_wave_incoming_questionmark, 1, false);

// Set wave length
alarm[2] = 300;

if (!DEBUG)
{
    room_speed = 500;
}

alarm[3] =  room_speed * audio_sound_length(sound0_GMTKgamemusic_enemy_wave_incoming_questionmark);

if (alarm[3] &lt; alarm[2])
{
    alarm[3] = alarm[2];
}

obj_kingdom.collaberated_yellow_green_west = false;
obj_kingdom.collaberated_yellow_green_south = false;

obj_kingdom.collaberated_blue_green_east = false;
obj_kingdom.collaberated_blue_green_south = false;

obj_kingdom.collaberated_yellow_blue_east = false;
obj_kingdom.collaberated_yellow_blue_west = false;

if (obj_kingdom.collaberated_yellow_green_west)
{
    scr_create_spawn(160, 304, c_yellow, YELLOW_SPAWN_RATE * obj_kingdom.spawn_modifiers[YELLOW] / 2, pth_yellow, YELLOW_HEALTH * obj_kingdom.hp_modifiers[YELLOW], YELLOW_SPEED * obj_kingdom.speed_modifiers[YELLOW]);
    scr_create_spawn(160, 304, c_green, GREEN_SPAWN_RATE * obj_kingdom.spawn_modifiers[GREEN] / 2, pth_green, GREEN_HEALTH * obj_kingdom.hp_modifiers[GREEN], GREEN_SPEED * obj_kingdom.speed_modifiers[GREEN]);
    scr_create_spawn(544, 288, c_blue, BLUE_SPAWN_RATE * obj_kingdom.spawn_modifiers[BLUE], pth_blue, BLUE_HEALTH * obj_kingdom.hp_modifiers[BLUE], BLUE_SPEED * obj_kingdom.speed_modifiers[BLUE]);
} else if (obj_kingdom.collaberated_yellow_green_south)
{
    scr_create_spawn(368, 400, c_yellow, YELLOW_SPAWN_RATE * obj_kingdom.spawn_modifiers[YELLOW] / 2, pth_yellow, YELLOW_HEALTH * obj_kingdom.hp_modifiers[YELLOW], YELLOW_SPEED * obj_kingdom.speed_modifiers[YELLOW]);
    scr_create_spawn(368, 400, c_green, GREEN_SPAWN_RATE * obj_kingdom.spawn_modifiers[GREEN] / 2, pth_green, GREEN_HEALTH * obj_kingdom.hp_modifiers[GREEN], GREEN_SPEED * obj_kingdom.speed_modifiers[GREEN]);
    scr_create_spawn(544, 288, c_blue, BLUE_SPAWN_RATE * obj_kingdom.spawn_modifiers[BLUE], pth_blue, BLUE_HEALTH * obj_kingdom.hp_modifiers[BLUE], BLUE_SPEED * obj_kingdom.speed_modifiers[BLUE]);
} else if (obj_kingdom.collaberated_blue_green_east)
{
    scr_create_spawn(160, 304, c_yellow, YELLOW_SPAWN_RATE * obj_kingdom.spawn_modifiers[YELLOW], pth_yellow, YELLOW_HEALTH * obj_kingdom.hp_modifiers[YELLOW], YELLOW_SPEED * obj_kingdom.speed_modifiers[YELLOW]);
    scr_create_spawn(544, 288, c_green, GREEN_SPAWN_RATE * obj_kingdom.spawn_modifiers[GREEN] / 2, pth_green, GREEN_HEALTH * obj_kingdom.hp_modifiers[GREEN], GREEN_SPEED * obj_kingdom.speed_modifiers[GREEN]);
    scr_create_spawn(544, 288, c_blue, BLUE_SPAWN_RATE * obj_kingdom.spawn_modifiers[BLUE] /2, pth_blue, BLUE_HEALTH * obj_kingdom.hp_modifiers[BLUE], BLUE_SPEED * obj_kingdom.speed_modifiers[BLUE]);
} else if (obj_kingdom.collaberated_blue_green_south)
{
    scr_create_spawn(160, 304, c_yellow, YELLOW_SPAWN_RATE * obj_kingdom.spawn_modifiers[YELLOW], pth_yellow, YELLOW_HEALTH * obj_kingdom.hp_modifiers[YELLOW], YELLOW_SPEED * obj_kingdom.speed_modifiers[YELLOW]);
    scr_create_spawn(368, 400, c_green, GREEN_SPAWN_RATE * obj_kingdom.spawn_modifiers[GREEN] / 2, pth_green, GREEN_HEALTH * obj_kingdom.hp_modifiers[GREEN], GREEN_SPEED * obj_kingdom.speed_modifiers[GREEN]);
    scr_create_spawn(368, 400, c_blue, BLUE_SPAWN_RATE * obj_kingdom.spawn_modifiers[BLUE] / 2, pth_blue, BLUE_HEALTH * obj_kingdom.hp_modifiers[BLUE], BLUE_SPEED * obj_kingdom.speed_modifiers[BLUE]);
} else if (obj_kingdom.collaberated_yellow_blue_east)
{
    scr_create_spawn(544, 288, c_yellow, YELLOW_SPAWN_RATE * obj_kingdom.spawn_modifiers[YELLOW] / 2, pth_yellow, YELLOW_HEALTH * obj_kingdom.hp_modifiers[YELLOW], YELLOW_SPEED * obj_kingdom.speed_modifiers[YELLOW]);
    scr_create_spawn(368, 400, c_green, GREEN_SPAWN_RATE * obj_kingdom.spawn_modifiers[GREEN], pth_green, GREEN_HEALTH * obj_kingdom.hp_modifiers[GREEN], GREEN_SPEED * obj_kingdom.speed_modifiers[GREEN]);
    scr_create_spawn(544, 288, c_blue, BLUE_SPAWN_RATE * obj_kingdom.spawn_modifiers[BLUE] / 2, pth_blue, BLUE_HEALTH * obj_kingdom.hp_modifiers[BLUE], BLUE_SPEED * obj_kingdom.speed_modifiers[BLUE]);
} else if (obj_kingdom.collaberated_yellow_blue_west)
{
    scr_create_spawn(160, 304, c_yellow, YELLOW_SPAWN_RATE * obj_kingdom.spawn_modifiers[YELLOW] / 2, pth_yellow, YELLOW_HEALTH * obj_kingdom.hp_modifiers[YELLOW], YELLOW_SPEED * obj_kingdom.speed_modifiers[YELLOW]);
    scr_create_spawn(368, 400, c_green, GREEN_SPAWN_RATE * obj_kingdom.spawn_modifiers[GREEN], pth_green, GREEN_HEALTH * obj_kingdom.hp_modifiers[GREEN], GREEN_SPEED * obj_kingdom.speed_modifiers[GREEN]);
    scr_create_spawn(160, 304, c_blue, BLUE_SPAWN_RATE * obj_kingdom.spawn_modifiers[BLUE] / 2, pth_blue, BLUE_HEALTH * obj_kingdom.hp_modifiers[BLUE], BLUE_SPEED * obj_kingdom.speed_modifiers[BLUE]);
} else {
    scr_create_spawn(160, 304, c_yellow, YELLOW_SPAWN_RATE * obj_kingdom.spawn_modifiers[YELLOW], pth_yellow, YELLOW_HEALTH * obj_kingdom.hp_modifiers[YELLOW], YELLOW_SPEED * obj_kingdom.speed_modifiers[YELLOW]);
    scr_create_spawn(368, 400, c_green, GREEN_SPAWN_RATE * obj_kingdom.spawn_modifiers[GREEN], pth_green, GREEN_HEALTH * obj_kingdom.hp_modifiers[GREEN], GREEN_SPEED * obj_kingdom.speed_modifiers[GREEN]);
    scr_create_spawn(544, 288, c_blue, BLUE_SPAWN_RATE * obj_kingdom.spawn_modifiers[BLUE], pth_blue, BLUE_HEALTH * obj_kingdom.hp_modifiers[BLUE], BLUE_SPEED * obj_kingdom.speed_modifiers[BLUE]);
}

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Initiate wave sequence.

// Create fade
var _fade = instance_create(0, 0, obj_fade);
_fade.text = "wave " + string(wave);

// Reset the damage on the castle.
obj_kingdom.yellow_damage = 0;
obj_kingdom.blue_damage = 0;
obj_kingdom.green_damage = 0;

obj_view.current_view = VIEW_NONE;

/* Check if the player is fired. If not, start the wave. */
if (obj_kingdom.favours[CHAR_QUEEN] &gt; 0 &amp;&amp; obj_kingdom.favours[CHAR_KING] &gt; 0 &amp;&amp; obj_kingdom.favours[CHAR_DIPLOMAT] &gt; 0 &amp;&amp; obj_kingdom.favours[CHAR_GENERAL] &gt; 0)
{
    alarm[1] = FADE_TIME;
    wave += 1;
    mode = MODE_WAVE;
} else
{
    mode = MODE_FIRED;
    if (obj_kingdom.favours[CHAR_KING] &lt; 1)
    {
        character_fired = "king";
        text_fired = "You disregarded what is the most important:#maintaining the respect of the people.";
    } else if (obj_kingdom.favours[CHAR_GENERAL] &lt; 1)
    {
        character_fired = "general";
        text_fired = "You disregarded what is the most important:#ensuring the safety of the country.";
    } else if (obj_kingdom.favours[CHAR_QUEEN] &lt; 1)
    {
        character_fired = "queen";
        text_fired = "You disregarded what is the most important:#ensuring the prosperty of the poeple.";
    } else if (obj_kingdom.favours[CHAR_DIPLOMAT] &lt; 1)
    {
        character_fired = "diplomat";
        text_fired = "You disregarded what is the most important:#maintaining the good relations with our neighbours.";
    }
    alarm[4] = 60;
}

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (mode == MODE_FIRED)
{
    draw_set_colour(c_black);
    draw_set_alpha(1 - ease_out_quint(alarm[4] - 30, 0, 1, 30));
    draw_rectangle(0, 0, 720, 560, false);
    
    if (alarm[4] &lt; 30)
    {
        draw_set_alpha(1 - ease_out_quint(alarm[4], 0, 1, 30));
        draw_set_colour(c_white);
        draw_set_font(fnt_large);
        draw_set_valign(fa_middle);
        draw_set_halign(fa_center);
        draw_text(360, 200, "You were fired by the " + character_fired + "!");
        draw_set_font(fnt_medium);
        draw_text(360, 240, text_fired);
        // TODO: Let clerk steal money sometimes.
        if (obj_kingdom.embezzled_money &lt;= 0)
        {
            draw_text(360, 320, "You didn't manage to embezzle any gold...");
        } else
        {
            draw_text(360, 320, "However, you did manage to embezzle " + string(obj_kingdom.embezzled_money) + " gold...");
        }
        // Reset aligned.
        draw_set_valign(fa_left);
        draw_set_halign(fa_top);
    }

    // Reset alpha.
    draw_set_alpha(1);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="9" enumb="68">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//increase roomspeed for debugging waves
if (DEBUG &amp;&amp; room_speed == 30)
{
    room_speed = 1000;
} else if (DEBUG)
{
    room_speed = 30
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
